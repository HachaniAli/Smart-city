# -*- coding: utf-8 -*-
"""ProjetiA_SmartCity_Accidents_EcomobilitesLegeres-Copy1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7Yq_Tf956Pjevdob_Ps_ZQQ8nRtwsg3

# Prévention des accidents causés par l’évolution rapide et importante de l’écomobilités légères dans les centres-villes

Projet IA - Smart City

Promotion e-learning M2 2021/2022

Les membres de l'équipe sont:
   - Mohamed AMCHEMER (Data Analyst)
   - Abdelkarim MAJDOUB (Data Scientist)
   - Ali HACHANI (Data Analyst/Scientist)
   - Tahar SLAMA (Data scientist/Project leader)

# Introduction sur la thématique du projet iA

- Quand la ville intelligente rime avec développement durable
    - Comment atteindre cette objectif ?
    - Comment peut-on en mesurer les impacts ?
- Infrastructures dans les villes
    - Réduction de nombres de voiture dans les centres-villes (~150 véhicules pour 1000 habitants)
    - Gain en espace et en parking pour des espaces verts intelligents et des immeubles intelligents
- Ecomobilité au service du développement durable
    - Gestion de modes de transport moins nuisibles à l’environnement et à la santé humaine.
    - Types de déplacements et véhicules concernés (mobilité douce/légère, voitures, transports en commun, covoiturage…)
- Mobilité douce/légère
    - Propulsion humaine: piétons, vélo mécanique, trottinette…
    - Propulsion assistée ou motorisée légère (EDP): vélos électrique, trottinettes électrique, les gyroroues…
- Règlementation
    - Code de la route: « Circulation des engins de déplacement personnel motorisés ».
    - Règlementation relative aux équipements de protection individuelle.
- Evolution des accidents corporels impliquant les ecomobilités légères (EDPm, velos...):
    - En 2019, 630 accidents corporels ont impliqué un usager d'engin personnel de déplacement motorisé (EFPmm). Ces accidents ont provoqué la mort de dix usagers d'EDPm et fait  554 bléssés. Source: Sécurité routière de France
    - Entre 2019 et 2021, nous avons une evolution des accidents corporels de plus de 120% au niveau des EDPm et de plus de 21% au niveau des velos.
- Un marché de l'ecomobilité légèreen plein essor de l'ordre de ~+25% par an.
    - Le marché des trotinettes électriques est de l'ordre de 35% par ans
    - Le marché des gyroroues électriques est de l'ordre de 30% par ans
    - Le marché des velos électriques est de l'ordre de 20% par ans

# Introduction sur la problématique du projet iA

La problématique est la prévention et l'anticipation de l'augmentation des accidents causés par l'évolution rapide et importante de l'écomobilité douce et légère dans les centre-villes (douce, vélo, trotinettes...). L'objectif est donc d'anticiper les futures reglementation et les potentiels déploiements de nouvelles infrastructures pour les differentes demandes de éco-mobilités en fonction des accidents et de l'evolution du marché de eco-mobilité.

# Structure d'un programme python

Le notebook est accompagné d'un readme et d'un powerpoint presentant les resultats du projet.

La structure du programme python est la suivante:
- Import des bibliothéques
- Partie I: Programme pour la strategie court terme de notre problématique. Cette partie de programme permet d'analyser les facteurs accidentogènes de l'écomobilité légère dans les centres-villes. Elle inclut le web service pour l'exploration des données en fonction des conditions accidentogènes.
- Partie II: Programme pour la strategie moyen/long terme de notre problématique
- Annexe: Liste de programme additionnel pour réaliser cette étude.

# Programmation

# Import des bibliothéques
"""

"""Récupération des differentes bibliotheques"""
import pandas as pd
import numpy as np
import io

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from datetime import datetime
import datetime as dt
import glob

import seaborn as sns
from matplotlib import pyplot as plt

#import folium
#from ipyleaflet import Map, Marker
#from folium.plugins import FastMarkerCluster

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import FunctionTransformer
from sklearn import preprocessing

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
#from xgboost import XGBRegressor
from sklearn.compose import ColumnTransformer
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import pickle

from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV

from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from math import sqrt
from sklearn.metrics import r2_score

"""# Partie I: Programme pour la strategie court /moyen terme de notre problématique

Cette partie de programme permet d'analyser les facteurs accidentogènes de l'écomobilité légère dans les centres-villes. Cette analyse montre l'influence des facteurs accidentogènes sur le nombre d'accidents. Elle inclut le web service pour la prédiction du nombre d'accidents en fonction des conditions accidentogènes.

Partie I.1: Analyse des facteurs accidentogènes de l’écomobilité légère dans les centres-villes

==> Prog Ali

Partie I.2: Web Service permettant de prédire le nombre d’accidents en fonction des conditions accidentogènes
dans les centres-villes

==> Prog Moh

# Partie II: Programme pour la strategie moyen/long terme de notre problématique

Cette partie de programme permet d'analyser l'impact du nombre d'accidents sur l’évolution rapide et importante de l’écomobilités légères dans les centres-villes. l'objectif est d'identifier les manques d'infrastucture ou des infrastructures mal-adaptées.
"""

# Listes de fonctions/structure utilisées
"""Définition des fonctions utilisés dans notre programme"""

def transform_absolute_2_relative(absolute_values_list):
    relative_values_list=[]
    for i,el in enumerate(absolute_values_list):
        if i==0:
            relative_values_list.append(el/100)
        else:
            relative_value=(el-absolute_values_list[(i-1)])/absolute_values_list[(i-1)]
            relative_values_list.append(relative_value)
    return(relative_values_list)

def year_from_date(date):
    date_time_obj = datetime.strptime(date, '%Y-%m-%d')
    return(date_time_obj.year)

def RatioEstimation_4_FutureAccident():
    """Estimation of the accident trend in the future according to the bicycle market evolution"""
    # Bicycle market analysis
    Years=[2017, 2018, 2019, 2020] # Define a value of 2018 by simple interpolation
    SubsidiesFromCityCouncil=[62, 98, 259, 1016] # Boullogne-Billancourt's Data coming from https://www.data.gouv.fr/fr/datasets/subventions-velos-a-assistance-electrique/
    BicycleRelativeMarketEvolution=transform_absolute_2_relative(SubsidiesFromCityCouncil)
    PerCentBicycleRelativeMarketEvolution=[0,BicycleRelativeMarketEvolution[1]*100,
                                       BicycleRelativeMarketEvolution[2]*100,BicycleRelativeMarketEvolution[3]*100]
    RatioBicycleRelativeMarketEvolution=[0,BicycleRelativeMarketEvolution[1]+1,
                                       BicycleRelativeMarketEvolution[2]+1,BicycleRelativeMarketEvolution[3]+1]
    EvoL_Market_Analysis={"Year":Years,
                      "SubsidyFromCityCouncil [absolute value]":SubsidiesFromCityCouncil,
                      "BicycleRelativeMarketEvolution [%]":PerCentBicycleRelativeMarketEvolution,
                      "BicycleRelativeMarketEvolution [ratio]":RatioBicycleRelativeMarketEvolution}
    df = pd.DataFrame(EvoL_Market_Analysis)

    # Bicycle market modelization based on absolute value
    X_market_analysis=df["Year"]
    yrr_market_analysis=df["BicycleRelativeMarketEvolution [ratio]"]
    model_market_ratio_analysis=LinearRegression()

    # Bicycle market modelization based on ratio value
    model_market_ratio_analysis.fit(X_market_analysis.values.reshape(-1,1),yrr_market_analysis.values.reshape(-1,1))
    yrr_model_market_analysis=model_market_ratio_analysis.predict(X_market_analysis.values.reshape(-1,1))

    # Prediction of bicycle market evolution based on ratio value
    X_future_market_analysis=np.arange(2021,2030)
    yrr_pred_model_market_analysis=model_market_ratio_analysis.predict(X_future_market_analysis.reshape(-1,1))
    yrr_pred_model_market_analysis_mean=np.ones(len(X_future_market_analysis))
    yrr_pred_model_market_analysis_meanAr=round(yrr_pred_model_market_analysis.mean())

    # Principe de Pareto
    # The Pareto principle (80-20 principle) is an observation that about 80% of the effects are the product of only 20%
    # of the causes. The phenomena that illustrates this principle follow a Pareto distribution.
    yrr_pred_model_market_analysis_final_ratio=round(0.2*yrr_pred_model_market_analysis_meanAr)
    return(yrr_pred_model_market_analysis_final_ratio)

# Fonction main
def main():
    df1 = pd.read_csv('accidentologie_rennes.csv', sep=';',encoding = "ISO-8859-1")
    print(df1["Localisation"].head(3))
    print(RatioEstimation_4_FutureAccident())

if __name__ == "__main__":
    main()

"""# Annexe: Liste de programme additionnel pour réaliser cette étude.

# ANNEXE I: Estimation of the accident trend in the future according to the bicycle market evolution

Bicycle market analysis
"""

# Dataset creation
Years=[2017, 2018, 2019, 2020] # Define a value of 2018 by simple interpolation
SubsidiesFromCityCouncil=[62, 98, 259, 1016] # Boullogne-Billancourt's Data coming from https://www.data.gouv.fr/fr/datasets/subventions-velos-a-assistance-electrique/
BicycleRelativeMarketEvolution=transform_absolute_2_relative(SubsidiesFromCityCouncil)
PerCentBicycleRelativeMarketEvolution=[0,BicycleRelativeMarketEvolution[1]*100,
                                       BicycleRelativeMarketEvolution[2]*100,BicycleRelativeMarketEvolution[3]*100]
RatioBicycleRelativeMarketEvolution=[0,BicycleRelativeMarketEvolution[1]+1,
                                       BicycleRelativeMarketEvolution[2]+1,BicycleRelativeMarketEvolution[3]+1]
EvoL_Market_Analysis={"Year":Years,
                      "SubsidyFromCityCouncil [absolute value]":SubsidiesFromCityCouncil,
                      "BicycleRelativeMarketEvolution [%]":PerCentBicycleRelativeMarketEvolution,
                      "BicycleRelativeMarketEvolution [ratio]":RatioBicycleRelativeMarketEvolution}
df = pd.DataFrame(EvoL_Market_Analysis)

# Bicycle market modelization based on absolute value
X_market_analysis=df["Year"]
yrr_market_analysis=df["BicycleRelativeMarketEvolution [ratio]"]
model_market_ratio_analysis=LinearRegression()

# Bicycle market modelization based on ratio value
model_market_ratio_analysis.fit(X_market_analysis.values.reshape(-1,1),yrr_market_analysis.values.reshape(-1,1))
yrr_model_market_analysis=model_market_ratio_analysis.predict(X_market_analysis.values.reshape(-1,1))

# Prediction of bicycle market evolution based on ratio value
X_future_market_analysis=np.arange(2021,2030)
yrr_pred_model_market_analysis=model_market_ratio_analysis.predict(X_future_market_analysis.reshape(-1,1))
yrr_pred_model_market_analysis_mean=np.ones(len(X_future_market_analysis))
yrr_pred_model_market_analysis_meanAr=round(yrr_pred_model_market_analysis.mean())

# Principe de Pareto
# The Pareto principle (80-20 principle) is an observation that about 80% of the effects are the product of only 20%
# of the causes. The phenomena that illustrates this principle follow a Pareto distribution.
yrr_pred_model_market_analysis_final_ratio=round(0.2*yrr_pred_model_market_analysis_meanAr)

# Plot
plt.scatter(X_market_analysis,yrr_market_analysis, label='Current')
plt.scatter(X_future_market_analysis,yrr_pred_model_market_analysis, label='Prediction')
plt.scatter(X_future_market_analysis,yrr_pred_model_market_analysis_mean*yrr_pred_model_market_analysis_meanAr, label='Average value of the prediction = {:d}'.format(yrr_pred_model_market_analysis_meanAr))
plt.scatter(X_future_market_analysis,yrr_pred_model_market_analysis_mean*yrr_pred_model_market_analysis_final_ratio, label='20% of average value of prediction (Pareto principle) = {:d}'.format(yrr_pred_model_market_analysis_final_ratio))
plt.legend()
plt.title('Bicycle market prediction')
plt.xlabel('Year')
plt.ylabel('Number of accident (relative value)')
plt.grid(True)

"""Accident trend analysis until 2018"""

# Dataset creation in the Boulogne-Billancourt's city
df1 = pd.read_csv('accidents-corporels-de-la-circulation-routiere-92.csv', sep=';')
df1=df1[["DATE_","COMMUNE","CAT_VE1","CAT_VE2","CAT_VE3","CAT_VE4","TYPE_ACCI","VICTIME"]]
df1=df1.assign(Accident=1) # Add colonum for accident
df1["DATE_"]=df1["DATE_"].apply(year_from_date)# Keep only the year instead of dd/mm/yy

# Define subdataset to keep only bicycle accident in Boulogne-Billancourt's city
df2=df1.loc[(df1["DATE_"]>=2017) & (df1["COMMUNE"]=="Boulogne-Billancourt") & ((df1["CAT_VE1"]=="Bicyclette") | (df1["CAT_VE2"]=="Bicyclette")| (df1["CAT_VE3"]=="Bicyclette")
      | (df1["CAT_VE4"]=="Bicyclette")),]
df3=df2.groupby(["DATE_"])["Accident"].sum().reset_index(name ='Accident')

# Bicycle accidents modelization based on absolute value
X_accident_analysis=df3["DATE_"]
ya_accident_analysis=df3["Accident"]
model_accident_abs_analysis=LinearRegression()
model_accident_abs_analysis.fit(X_accident_analysis.values.reshape(-1,1),ya_accident_analysis.values.reshape(-1,1))

# Prediction of bicycle accident based on absolute value
X_future_accident_analysis=np.arange(2019,2030)
ya_pred_model_accident_analysis=model_accident_abs_analysis.predict(X_future_accident_analysis.reshape(-1,1))
plt.scatter(X_accident_analysis,ya_accident_analysis, label='Current')
plt.scatter(X_future_accident_analysis,ya_pred_model_accident_analysis, label='Prediction without bicycle market impact')
plt.scatter(X_future_accident_analysis,ya_pred_model_accident_analysis*yrr_pred_model_market_analysis_final_ratio, label='Prediction with bicycle market impact (calculated ratio = {:d})'.format(yrr_pred_model_market_analysis_final_ratio))
plt.legend()
plt.xlabel('Year')
plt.ylabel('Number of accident (absolute value)')
plt.title('Bicycle accident prediction with the market\'s impact')
plt.grid(True)

"""# ANNEXE II: Prog Ali, Moh ou Karim si besoin..."""



